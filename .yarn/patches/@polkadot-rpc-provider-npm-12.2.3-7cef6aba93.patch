diff --git a/http/index.js b/http/index.js
index 8b3a2eaa70f3867adbe170fd6dbfde168632ebf1..c4633e74a03b75863428304fca5e68e97099fed4 100644
--- a/http/index.js
+++ b/http/index.js
@@ -26,7 +26,7 @@ const l = logger('api-http');
  * @see [[WsProvider]]
  */
 export class HttpProvider {
-    __internal__callCache = new LRUCache();
+    // __internal__callCache = new LRUCache();
     __internal__coder;
     __internal__endpoint;
     __internal__headers;
@@ -100,10 +100,10 @@ export class HttpProvider {
     /**
      * @summary Send HTTP POST Request with Body to configured HTTP Endpoint.
      */
-    async send(method, params, isCacheable) {
+    async send(method, params, _isCacheable) {
         this.__internal__stats.total.requests++;
         const [, body] = this.__internal__coder.encodeJson(method, params);
-        const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';
+        /*const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';
         let resultPromise = isCacheable
             ? this.__internal__callCache.get(cacheKey)
             : null;
@@ -115,7 +115,8 @@ export class HttpProvider {
         }
         else {
             this.__internal__stats.total.cached++;
-        }
+        }*/
+        const resultPromise = this.__internal__send(body);
         return resultPromise;
     }
     async __internal__send(body) {
diff --git a/ws/index.js b/ws/index.js
index f35aa8183f2d114266fcb471b7d2d87c503a84a1..e27e770a10162a740c662ee9e4dfacbca42f7cbb 100644
--- a/ws/index.js
+++ b/ws/index.js
@@ -49,7 +49,7 @@ function defaultEndpointStats() {
  * @see [[HttpProvider]]
  */
 export class WsProvider {
-    __internal__callCache;
+    // __internal__callCache;
     __internal__coder;
     __internal__endpoints;
     __internal__headers;
@@ -84,7 +84,7 @@ export class WsProvider {
                 throw new Error(`Endpoint should start with 'ws://', received '${endpoint}'`);
             }
         });
-        this.__internal__callCache = new LRUCache(cacheCapacity || DEFAULT_CAPACITY);
+        // this.__internal__callCache = new LRUCache(cacheCapacity || DEFAULT_CAPACITY);
         this.__internal__eventemitter = new EventEmitter();
         this.__internal__autoConnectMs = autoConnectMs || 0;
         this.__internal__coder = new RpcCoder();
@@ -246,11 +246,11 @@ export class WsProvider {
      * @param params Encoded parameters as applicable for the method
      * @param subscription Subscription details (internally used)
      */
-    send(method, params, isCacheable, subscription) {
+    send(method, params, _isCacheable, subscription) {
         this.__internal__endpointStats.requests++;
         this.__internal__stats.total.requests++;
         const [id, body] = this.__internal__coder.encodeJson(method, params);
-        const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';
+        /*const cacheKey = isCacheable ? `${method}::${stringify(params)}` : '';
         let resultPromise = isCacheable
             ? this.__internal__callCache.get(cacheKey)
             : null;
@@ -263,7 +263,8 @@ export class WsProvider {
         else {
             this.__internal__endpointStats.cached++;
             this.__internal__stats.total.cached++;
-        }
+        }*/
+            const resultPromise = this.__internal__send(id, body, method, params, subscription);
         return resultPromise;
     }
     async __internal__send(id, body, method, params, subscription) {
